#+Startup: overview

* Package Archives
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org"  . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("elpy" . "http://jorgenschaefer.github.io/packages/"))
  #+END_SRC

* Interface Tweaks & Server
  - custom-set-faces was added by Custom. 
    If you edit it by hand, you could mess it up, so be careful. Your
    init file should contain only one such instance. If there is more
    than one, they won't work right.
    #+BEGIN_SRC emacs-lisp
      (custom-set-faces
       '(fg:erc-color-face12 ((t (:foreground "deep sky blue"))))
       '(iedit-occurrence ((t (:inherit highlight :background "yellow")))))
    #+END_SRC
  - set font face
    #+BEGIN_SRC emacs-lisp
      ;; (set-face-attribute 'default nil :font "ProggyTinySZ-12") ;; Bitmap font
      ;; (set-face-attribute 'default nil :font "ProggyTinyTTSZ-14") ;; Truetype font
      ;; (set-face-attribute 'default nil :font "") ;; Truetype font
      ;; (set-face-attribute 'default nil :font "Inconsolata-10") ;; Truetype font
      (set-face-attribute 'default nil :font "DejaVuSansMono-10") ;; Truetype font
      ;; (set-default-font "Inconsolata 10")
    #+END_SRC
  - set the font size
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 100)
    #+END_SRC
  - inhibit splash screen
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
    #+END_SRC
  - make emacs transparent
    #+BEGIN_SRC emacs-lisp
      (set-frame-parameter (selected-frame) 'alpha '(85 85))
      (add-to-list 'default-frame-alist '(alpha 85 85))
    #+END_SRC
  - make history length longer
    #+BEGIN_SRC emacs-lisp
      (setq history-length 1000)
    #+END_SRC
  - enable visual bell
    #+BEGIN_SRC emacs-lisp
      (setq visible-bell 1)
    #+END_SRC
  - use theme moe
    #+BEGIN_SRC emacs-lisp
      (use-package moe-theme)
    #+END_SRC
  - set the width of simple html reader to a more comforting value
    #+BEGIN_SRC emacs-lisp
      (setq shr-width 80)
    #+END_SRC

   - Make sure the server is running, in order to let other connect to
     this instance
     #+BEGIN_SRC emacs-lisp
       (server-start)
     #+END_SRC

* Loadpaths
  Add folders to the load-path
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/color-theme/")
    (add-to-list 'load-path "~/.emacs.d/color-theme/themes/")
    (add-to-list 'load-path "~/.emacs.d/calendar/")
    (add-to-list 'load-path "~/.emacs.d/elim/")
    (add-to-list 'load-path "~/.emacs.d/elim/elisp/")
    (add-to-list 'load-path "~/.emacs.d/flycheck/")
    (add-to-list 'load-path "~/.emacs.d/neotree/")
    (add-to-list 'load-path "~/.emacs.d/nginx-mode/")
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  #+END_SRC

* Key-Bindings
  Define custom key bindings

  - ibuffer-mode
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC

  - set global print key
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<print>") 'print-buffer)
    #+END_SRC

  - other bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-= C-=") 'er/expand-region)
      (global-set-key (kbd "C-<tab>") 'other-window)
      (global-set-key (kbd "M-<tab>") 'other-frame)
      (global-set-key (kbd "<f5>")    'revert-buffer)
      (global-set-key (kbd "C-z")     'undo)
      (global-set-key (kbd "M-*")     'pop-tag-mark)
      (global-set-key (kbd "C-<f7>")  'simple-mpc)
    #+END_SRC

* Org-Mode Config
** ox-latex
   #+BEGIN_SRC emacs-lisp
   (use-package ox-latex
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :config
   ;; Org's Latex Exporter configurations sction
   (setq org-latex-pdf-process
  			 '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   (setq org-export-latex-listings 'minted)
   (add-to-list 'org-latex-packages-alist '("" "minted"))
  
   ;; for bigger latex preview in org-mode (C-c C-x C-l)
   (plist-put org-format-latex-options :scale 1.8)
   )
   #+END_SRC
** ox-md
   #+BEGIN_SRC emacs-lisp
   (use-package ox-md
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")
   )
   #+END_SRC
** org-mu4e
   #+BEGIN_SRC emacs-lisp
   (use-package org-mu4e
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :config 
   (setq org-mu4e-convert-to-html t)
   )
   #+END_SRC
** org-protocol
   #+BEGIN_SRC emacs-lisp
   (use-package org-protocol
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :ensure f)
   #+END_SRC
** org-capture
   #+BEGIN_SRC emacs-lisp
   (use-package org-capture
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :config 
   (setq org-capture-templates '(("i" "Item [inbox]" entry
                                    (file "~/gtd/inbox.org")
                                    "* TODO %i%?")
                                   ("T" "Timed" entry
                                    (file+headline "~/gtd/timed.org" "Timed")
                                    "* %i%? \n %U")
                                   ("w" "Url [inbox]" entry
                                    (file "~/gtd/inbox.org")
                                    "* TODO %?[[%:link][%:description]]")
                                   ("W" "Url with Text [inbox]" entry
                                    (file "~/gtd/inbox.org")
                                    "* TODO %?[[%:link][%:description]] \n  %:initial")
                                   ))
                                   )
   #+END_SRC
** org-capture-pop-frame
   #+BEGIN_SRC emacs-lisp
   (use-package org-capture-pop-frame
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")
   )
   #+END_SRC
** org-install
   #+BEGIN_SRC emacs-lisp
   (use-package org-install
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")
   )
   #+END_SRC
** org-jira
   #+BEGIN_SRC emacs-lisp
   (use-package org-jira
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :config
   ;; you need make sure whether the "/jira" at the end is necessary or
   ;; not, see discussion at the end of this page
   (setq jiralib-url "http://jira.frosch03.de")
   )
   #+END_SRC
** org-gcal
   #+BEGIN_SRC emacs-lisp
   (use-package org-gcal
   :ensure f
   :init
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib")
   (add-to-list 'load-path "~/.emacs.d/org-latest/lisp")
   (add-to-list 'load-path "~/.emacs.d/org-latest/contrib/lisp")

   :config
   (setq package-check-signature nil)
  
   ;; configuration within private_config.org
   ;; (setq org-gcal-client-id "00000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
   ;; 	org-gcal-client-secret "<password>"
   ;; 	org-gcal-file-alist '(("<username>" .  "<org-file>")))
  
   (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
   ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
   )
   #+END_SRC

** agenda
   Set the agenda files to my GTD fileset:
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files '("~/gtd/inbox.org"
                              "~/gtd/current.org"
                              "~/gtd/timed.org"))
   #+END_SRC

   Define the files one is able to refile stuff into:
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path t)

     (setq org-refile-targets '(("~/gtd/current.org" :maxlevel . 2)
                                ("~/gtd/future.org" :level . 1)
                                ("~/gtd/timed.org" :maxlevel . 2)))
   #+END_SRC

   Set the default todo types:
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
   #+END_SRC

   Start emacs within Org's Agenda mode. 
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'org-agenda-list)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; starte agenda in ganzem fenster
     (setq org-agenda-window-setup 'current-window)

     ;; Tasks mit Priori√§ten unterschiedlich darstellen:
     (setq org-agenda-fontify-priorities 
           (quote ((65 (:foreground "Red")) (66 (:foreground "Blue")) (67 (:foreground "Darkgreen")))))

     (setq org-agenda-date-weekend (quote (:foreground "Yellow" :weight bold)))


     (define-key mode-specific-map [?a] 'org-agenda)

     (eval-after-load "org"
       '(progn
          (define-prefix-command 'org-todo-state-map)

          (define-key org-mode-map "\C-cx" 'org-todo-state-map)

          (define-key org-todo-state-map "x"
            #'(lambda nil (interactive) (org-todo "CANCELLED")))
          (define-key org-todo-state-map "d"
            #'(lambda nil (interactive) (org-todo "DONE")))
          ;; (define-key org-todo-state-map "f"
          ;;   #'(lambda nil (interactive) (org-todo "DEFERRED")))
          (define-key org-todo-state-map "w"
            #'(lambda nil (interactive) (org-todo "WAITING")))
          ;; (define-key org-todo-state-map "s"
          ;;   #'(lambda nil (interactive) (org-todo "STARTED")))
          ;; (define-key org-todo-state-map "w"
          ;;   #'(lambda nil (interactive) (org-todo "WAITING")))

          (eval-after-load "org-agenda"
            '(progn 
               (define-key org-agenda-mode-map "\C-n" 'next-line)
               (define-key org-agenda-keymap "\C-n" 'next-line)
               (define-key org-agenda-mode-map "\C-p" 'previous-line)
               (define-key org-agenda-keymap "\C-p" 'previous-line)
               )
            )
          )
       )

   #+END_SRC

** mobile
   - Automaticall pull mobile while starting and push while ending
     #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'org-mobile-pull)
     (add-hook 'kill-emacs-hook 'org-mobile-push)
     #+END_SRC

** bullets
   Org-Mode Bullets - for nice looking org-mode bullet items
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure f
       :config
       (autoload 'org-bullets "org-bullets")
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC

** ditaa & plantuml
   - setup paths
     #+BEGIN_SRC emacs-lisp
       (setq org-ditaa-jar-path "~/bin/ditaa.jar")
       (setq org-plantuml-jar-path "~/bin/plantuml.jar")
     #+END_SRC
   - Use fundamental mode when editing plantuml blocks with C-c '
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
     #+END_SRC

** babel
   - Make babel results blocks lowercase
     #+BEGIN_SRC emacs-lisp
     (setq org-babel-results-keyword "results")
     #+END_SRC

   - list of loaded languages
     #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      (quote org-babel-load-languages)
      (quote ((emacs-lisp . t)
              (dot . t)
              (ditaa . t)
              (R . t)
              (python . t)
              (ruby . t)
              (gnuplot . t)
              (clojure . t)
              (sh . t)
              (ledger . t)
              (org . t)
              (plantuml . t)
              (latex . t))))
     #+END_SRC

   - inhibit prompt to confirm evaluation

     This may be dangerous - make sure you understand the consequences
     of setting this -- see the docstring for details
     #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
     #+END_SRC

** image handling
   #+BEGIN_SRC emacs-lisp
     (setq org-image-actual-width 300)

     (defun bh/display-inline-images ()
       (condition-case nil
           (org-display-inline-images)
         (error nil)))

     (add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)
   #+END_SRC

** keybindings
   #+BEGIN_SRC emacs-lisp
     ;; set keys to link
     (global-set-key (kbd "C-c C-l") 'org-store-link)
     (global-set-key (kbd "C-c l") 'org-insert-link)
     (define-key global-map "\C-cc" 'org-capture)
     (global-set-key (kbd "C-S-<f10>")   'org-agenda-list)
     (global-set-key (kbd "C-S-<f11>")   'org-mobile-push)
     (global-set-key (kbd "C-S-<f12>")   'org-mobile-pull)
   #+END_SRC
** file associations
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "org"
       '(progn
          ;; .txt files aren't in the list initially, but in case that changes
          ;; in a future version of org, use if to avoid errors
          (if (assoc "\\.txt\\'" org-file-apps)
              (setcdr (assoc "\\.txt\\'" org-file-apps) "notepad.exe %s") 
            (add-to-list 'org-file-apps '("\\.txt\\'" . "notepad.exe %s") t))
          ;; Change .pdf association directly within the alist
          (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))

     (setq org-src-fontify-natively t)

     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   #+END_SRC

* Dired Config
** Configuring loadpath:
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/dired/")
   #+END_SRC
** dired+
   #+BEGIN_SRC emacs-lisp
   (use-package dired+
   :ensure f
   :config
   ;; Omit some file \\
   ;; dired-omit-files contains the regex of the files to hide in Dired
   ;; Mode. For example, if you want to hide the files that begin with
   ;; . and #, set that variable like this
   (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")
   (add-to-list 'dired-omit-extensions ".hi") ;; hide haskell .hi files

   ;; Always copy & delete directories recursively
   (setq dired-recursive-copies 'always)
   (setq dired-recursive-deletes 'always)

   ;; Auto guess target \\
   ;; Set this variable to non-nil, Dired will try to guess a default
   ;; target directory. This means: if there is a dired buffer displayed
   ;; in the next window, use its current subdir, instead of the current
   ;; subdir of this dired buffer. The target is used in the prompt for
   ;; file copy, rename etc.
   (setq dired-dwim-target t)

   ;; Delete by moving to Trash
   (setq delete-by-moving-to-trash t
         trash-directory "/tmp/trash")

   ;; Configure the listing of files \\
   ;; The variable dired-listing-switches specifies the extra argument
   ;; that you want to pass to ls command. For example, calling ls
   ;; ‚Äìgroup-directories-first will result in ls sort the directories
   ;; first in the output. To let Emacs pass that argument to ls, use
   ;; this code
   (setq dired-listing-switches "--group-directories-first -alh")
   )
   #+END_SRC
** dired-x
   #+BEGIN_SRC emacs-lisp
   (use-package dired-x
   :ensure f)
   #+END_SRC
** dired-details+
   #+BEGIN_SRC emacs-lisp
   (use-package dired-details+
   :ensure t
   :config
   ;; Show dired detils like sym-links
   (setq dired-details-hide-link-targets nil)
   )
   #+END_SRC
** dired-rainbow
   #+BEGIN_SRC emacs-lisp
   (use-package dired-rainbow
   :ensure t
   :config
   ;; Configure extensions of audio files
   (defconst dired-audio-files-extensions
     '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
     "Dired Audio files extensions")
   (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

   ;; Configure extensions of video files
   (defconst dired-video-files-extensions
     '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
       "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
     "Dired Video files extensions")
   (dired-rainbow-define video "#B3CCFF" dired-video-files-extensions)
   )
   #+END_SRC
** dired-filter
   #+BEGIN_SRC emacs-lisp
   (use-package dired-filter
   :ensure t)
   #+END_SRC
** Startup dired within home directory by S-<F1>
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "S-<f1>")
                     (lambda ()
                       (interactive)
                       (dired "~/")))
   #+END_SRC
* ERC irc
  #+BEGIN_SRC emacs-lisp
    (use-package erc
    :ensure t)
  #+END_SRC
* Latex Config
- Loading up
  #+BEGIN_SRC emacs-lisp
  (autoload 'reftex "reftex" "RefTeX")
  (load "auctex.el" nil t t)
  #+END_SRC
- Configure some load-hooks
  #+BEGIN_SRC emacs-lisp
    (add-hook 'TeX-language-de-hook 
              (lambda () (ispell-change-dictionary "german")))
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
   (defun fill-latex-mode-hook ()
      "LaTeX setup."
      (setq fill-column 130))
    (add-hook 'LaTeX-mode-hook 'fill-latex-mode-hook)
   (fset 'my-latex-write-and-view
          [?\C-x ?\C-s ?\C-c ?\C-c return])
    (add-hook 'LaTeX-mode-hook (lambda () 
                                 (local-set-key (kbd "<f5>") 'my-latex-write-and-view)))
   (defun my-latex-highlight-owninlinecode ()
      "Highlight own inline code"
      (highlight-regexp "\\hs{[^\}]*}" 'hi-green-b))
    (add-hook 'LaTeX-mode-hook 'my-latex-highlight-owninlinecode)
   (defun my-latex-highlight-todos ()
      "Highlight Todo's"
      (highlight-regexp "\\todo{[^\}]*}" 'hi-red-b))
    (add-hook 'LaTeX-mode-hook 'my-latex-highlight-todos)
   (add-hook 'LaTeX-mode-hook (lambda () 
                                 (local-set-key (kbd "<f12>") 'highlight-changes-mode)))
 #+END_SRC
- Query for master file
  #+BEGIN_SRC emacs-lisp
    (setq-default TeX-master nil)
  #+END_SRC
- Highlight special words within latex files
  #+BEGIN_SRC emacs-lisp
    (defface my-green-b '((t  (:foreground  "green"               
                                            )))  "green-face")
   (font-lock-add-keywords 'latex-mode 
      										  '( ("\\\\hs"   0 'my-green-b prepend)
      											   ("\\\\todo" 0 'hi-red     prepend)
                               )
                            )
  #+END_SRC
- Add the -shell-escape to the compiling command for the minted
  sourcecode package
  #+BEGIN_SRC emacs-lisp
    (eval-after-load "tex" 
      '(setcdr (assoc "LaTeX" TeX-command-list)
               '("%`%l%(mode) -shell-escape%' %t"
                 TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX")
               )
      )
  #+END_SRC
- Disable narrowing to latex environment
  #+BEGIN_SRC emacs-lisp
    (put 'LaTeX-narrow-to-environment 'disabled nil)
  #+END_SRC
* Markdown-Mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:ensure t
:config
(setq auto-mode-alist
      (cons '("\\.md" . markdown-mode) auto-mode-alist))
)

#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:config
(global-set-key (kbd "C-<f9>") 'magit-status)
)
#+END_SRC
* Haskell
** Configure loadpath
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/haskell-mode/")
#+END_SRC

** haskell-mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
:ensure t
:config
;; Setup some hooks
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook (lambda () 
                             (local-set-key (kbd "M-.") 'haskell-mode-tag-find))))
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

;; Define default info directory
(add-to-list 'Info-default-directory-list "~/.emacs.d/haskell-mode/")
#+END_SRC

** haskell-cabal
#+BEGIN_SRC emacs-lisp
(use-package haskell-cabal
:ensure f)
#+END_SRC

** haskell-interactive-mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-interactive-mode
:ensure f)
#+END_SRC

** haskell-process
#+BEGIN_SRC emacs-lisp
(use-package haskell-process
:ensure f
:config
(custom-set-variables
  '(haskell-process-suggest-remove-import-lines t)
  '(haskell-process-auto-import-loaded-modules t)
  '(haskell-process-log t))
)
#+END_SRC
* Flyspell
- Define flyspell switch language function
  #+BEGIN_SRC emacs-lisp
    (defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
             (change (if (string= dic "deutsch8") "english" "deutsch8")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
  #+END_SRC
- Define function that checks next highlighted word
  #+BEGIN_SRC emacs-lisp
    (defun flyspell-check-next-highlighted-word ()
      "Custom function to spell check next highlighted word"
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word)
      )
  #+END_SRC
- Setup keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f9>")       'fd-switch-dictionary)
    (global-set-key (kbd "C-S-<f8>")   'flyspell-mode)
    (global-set-key (kbd "C-M-S-<f8>") 'flyspell-buffer)
    (global-set-key (kbd "C-<f8>")     'flyspell-check-previous-highlighted-word)
    (global-set-key (kbd "M-<f8>")     'flyspell-check-next-highlighted-word)
  #+END_SRC
* Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake
:ensure t
:config
;; Define function to make haskell code on the fly
(defun flymake-Haskell-init ()
  (flymake-simple-make-init-impl
   'flymake-create-temp-with-folder-structure nil nil
   (file-name-nondirectory buffer-file-name)
   'flymake-get-Haskell-cmdline))

(defun flymake-get-Haskell-cmdline (source base-dir)
  (list "flycheck_haskell.pl"
        (list source base-dir)))

;; Attach functionality to filetypes
(push '(".+\\.hs$" flymake-Haskell-init flymake-simple-java-cleanup)
      flymake-allowed-file-name-masks)
(push '(".+\\.lhs$" flymake-Haskell-init flymake-simple-java-cleanup)
      flymake-allowed-file-name-masks)
(push '("^\\(\.+\.hs\\|\.lhs\\):\\([0-9]+\\):\\([0-9]+\\):\\(.+\\)" 1 2 3 4) 
      flymake-err-line-patterns)
)
#+END_SRC
* GNUS
#+BEGIN_SRC emacs-lisp
;; (use-package gnus-load
;; :ensure f
;; :config 
;; ;; Configure loadpath
;; (setq load-path (cons (expand-file-name "~/.emacs.d/gnus/lisp") load-path))
;; 
;; ;; Configure info directory
;; (add-to-list 'Info-default-directory-list "~/.emacs.d/gnus/texi/")
;; 
;; ;; Setup emacss mail user agent
;; (setq mail-user-agent 'gnus-user-agent)
;; 
;; ;; Attach bbdb hook
;; (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;; 
;; ;; Configure S/MIME\\
;; ;; This configuration might not just be for gnus but also for mu4e,
;; ;; but i need to further confirm that
;; (setq mm-decrypt-option 'always)
;; (setq mm-verify-option 'always)
;; (setq gnus-buttonized-mime-types '("multipart/encrypted" "multipart/signed"))
;; 
;; (add-hook 'message-send-hook 'mml-secure-message-sign-smime)
;; 
;; (setq password-cache t) ; default is true, so no need to set this actually
;; (setq password-cache-expiry 86400); default is 16 seconds
;; 
;; ;; (setq mml-signencrypt-style-alist '(("smime" combined)
;; ;;                                     ("pgp" combined)
;; ;;                                     ("pgpmime" combined)))
;; 
;; (setq mml-signencrypt-style-alist '(("smime" separate)
;;                                     ("pgp" separate)
;;                                     ("pgpauto" separate)
;;                                     ("pgpmime" separate)))
;; 
;; )
#+END_SRC
* BBDB 
** Configuring loadpath
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/bbdb/lisp/")
#+END_SRC
** Configuring Info directory
#+BEGIN_SRC emacs-lisp
(add-to-list 'Info-default-directory-list "~/.emacs.d/bbdb/texinfo/")
#+END_SRC

** bbdb
#+BEGIN_SRC emacs-lisp
(use-package bbdb
:ensure t
:config
(bbdb-initialize 'gnus 'message)

(setq 
 bbdb-offer-save 1                        ;; 1 means save-without-asking


 bbdb-use-pop-up t                        ;; allow popups for addresses
 bbdb-electric-p t                        ;; be disposable with SPC
 bbdb-popup-target-lines  1               ;; very small
 bbdb-dwim-net-address-allow-redundancy t ;; always use full name
 bbdb-quiet-about-name-mismatches 2       ;; show name-mismatches 2 secs
 bbdb-always-add-address t                ;; add new addresses to existing...
 ;; ...contacts automatically
 ;;     bbdb-canonicalize-redundant-nets-p t     ;; x@foo.bar.cx => x@bar.cx
 bbdb-completion-type nil                 ;; complete on anything
 bbdb-complete-name-allow-cycling t       ;; cycle through matches
 ;; this only works partially
 bbbd-message-caching-enabled t           ;; be fast
 bbdb-use-alternate-names t               ;; use AKA
 bbdb-elided-display t                    ;; single-line addresses

 ;; auto-create addresses from mail
 bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook   
 bbdb-ignore-some-messages-alist ;; don't ask about fake addresses
 ;; NOTE: there can be only one entry per header (such as To, From)
 ;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html

 '(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter"))
 )

;; Extract SMime Certificates
(defun DE-get-certificate-files-from-bbdb () 
  (let ((certfiles nil))
    (save-excursion
      (save-restriction
        (message-narrow-to-headers-or-head)
        (let ((names (remq nil (mapcar 'message-fetch-field '("To" "Cc" "From")))))
          (mapc (function (lambda (arg)
                            (let ((rec (bbdb-search-simple nil (cdr arg))))
                              (when rec
                                (let ((cert (bbdb-get-field rec 'certfile)))
                                  (when (and (> (length cert) 0) (not (member cert certfiles)))
                                    (push cert certfiles)(push 'certfile certfiles)))))))
                (mail-extract-address-components (mapconcat 'identity names ",") t)))
        (if (y-or-n-p (concat (mapconcat 'file-name-nondirectory (remq 'certfile certfiles) ", ") ".  Add more certificates? "))
            (nconc (mml-smime-encrypt-query) certfiles)
          certfiles)))))

(add-to-list 'mml-encrypt-alist '("smime" mml-smime-encrypt-buffer DE-get-certificate-files-from-bbdb))

(defun DE-snarf-smime-certificate ()
  (interactive)
  (if (or (assoc "certfile" (bbdb-propnames))
          (progn (when (y-or-n-p "Field 'certfile' does not exist in BBDB. Define it? ")
                   (bbdb-set-propnames 
                    (append (bbdb-propnames) (list (list "certfile"))))
                   t)))
      (if (get-buffer gnus-article-buffer)
          (progn 
            (set-buffer gnus-article-buffer)
            (beginning-of-buffer)
            (if (search-forward "S/MIME Signed Part:Ok" nil t)
                (let* ((data (mm-handle-multipart-ctl-parameter 
                              (get-text-property (point) 'gnus-data) 'gnus-details))
                       (address (progn (string-match "^Sender claimed to be: \\(.*\\)$" data)
                                       (substring data (match-beginning 1) (match-end 1))))
                       (rec (bbdb-search-simple nil address)))
                  (if rec
                      (let* ((certfile (bbdb-get-field rec 'certfile))
                             (filename (bbdb-record-name rec))
                             (dowrite (or (zerop (length certfile)) 
                                          (y-or-n-p "User already has a certfile entry. Overwrite? ")))
                             (begincert nil))
                        (when dowrite
                          (string-match (concat "\\(emailAddress=\\|email:\\)" address) data)
                          (setq begincert (string-match "^-----BEGIN CERTIFICATE-----$" data (match-end 0)))
                          (if (and smime-certificate-directory
                                   (file-directory-p smime-certificate-directory))
                              (progn
                                (setq filename (concat (file-name-as-directory smime-certificate-directory) 
                                                       (mm-file-name-replace-whitespace filename) ".pem"))
                                (when (or (not (file-exists-p filename))
                                          (y-or-n-p (concat "Filename " filename " already exists. Overwrite? "))) 
                                  (string-match "^-----END CERTIFICATE-----$" data begincert)
                                  (write-region (substring data begincert (+ (match-end 0) 1)) nil filename)
                                  (bbdb-record-putprop rec 'certfile filename)
                                  (bbdb-change-record rec t)
                                  (bbdb-redisplay-one-record rec)
                                  (message (concat "Saved certificate and updated BBDB record for " address))))
                            (progn
                              (ding)(message "smime-certificate-directory not correctly set.")))
                          ))
                    (progn
                      (ding)
                      (message (concat "No entry for address " address " in the BBDB.")))))
              (progn (ding)
                     (message "No valid S/MIME signed message found.")))
            )  
        (progn
          (ding)(message "No article buffer available.")))
    (progn
      (ding)(message "No field 'certfile' defined in BBDB."))))
)
#+END_SRC
* ACE Jump mode
** ace-jump-mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:ensure t
:config
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; more powerfull jump back feature
(autoload
	'ace-jump-mode-pop-mark
	"ace-jump-mode"
	"Ace jump back:-)"
	t)
(eval-after-load "ace-jump-mode"
	'(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC
* Hackernews
Simple Hackernews-frontend

#+BEGIN_SRC emacs-lisp
(use-package hackernews
:ensure t)
#+END_SRC

* Autopair
Automatically set the Brackets

#+BEGIN_SRC emacs-lisp
(use-package autopair
:ensure t
:config 
(autopair-global-mode)
)
#+END_SRC

* iedit
Change multiple occurences

#+BEGIN_SRC emacs-lisp
(use-package iedit
:ensure t)
#+END_SRC

* frogblogmode
frogblog major mode

#+BEGIN_SRC emacs-lisp
;;(use-package frogblogmode
;;:ensure f
;;:init
;;(add-to-list 'load-path "~/.emacs.d/frogblogmode/")
;;)
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:ensure t
:config
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
)
#+END_SRC

* popup windows
#+BEGIN_SRC emacs-lisp
(use-package popwin
:ensure t
:init
(add-to-list 'load-path "~/.emacs.d/popwin-el")
(add-to-list 'load-path "~/.emacs.d/popwin-el/misc")

:config
;; Popup Windows
(popwin-mode 1)
(global-set-key (kbd "C-=") popwin:keymap)
(global-set-key (kbd "C-= t") 'popwin-term:term)

(push '(term-mode :position :top :height 16 :stick t) popwin:special-display-config)
)
#+END_SRC

* winner mode
to switch back to window configurations

#+BEGIN_SRC emacs-lisp
(winner-mode 1) 
#+END_SRC

* browser
#+BEGIN_SRC emacs-lisp
  ;; Set the Conkeror as emacs default browser
  ;; (setq browse-url-browser-function 'browse-url-generic
  ;;       browse-url-generic-program "/home/frosch03/bin/conky")
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "/usr/bin/firefox")
  (setq browse-url-browser-function 'browse-url-default-browser
        browse-url-generic-program "/usr/bin/firefox")
  ;; (setq browse-url-browser-function 'browse-url-generic
  ;;       browse-url-generic-program "/usr/bin/chromium")
#+END_SRC

* elpy
#+BEGIN_SRC emacs-lisp
(package-initialize)
(elpy-enable)
#+END_SRC

* flymake
#+BEGIN_SRC emacs-lisp
(when (load "flymake" t)
 (defun flymake-pylint-init ()
   (let* ((temp-file (flymake-init-create-temp-buffer-copy
                      'flymake-create-temp-inplace))
          (local-file (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
     (list "~/.emacs.d/pyflymake.py" (list local-file))))
 (add-to-list 'flymake-allowed-file-name-masks
              '("\\.py\\'" flymake-pylint-init)))
#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:config
;; (projectile-global-mode)
(setq projectile-mode-line " Projectile")
(setq projectile-indexing-method 'native)
(setq projectile-enable-caching t)
;; For Tramp to work with projectile
;; (add-hook 'text-mode-hook 'projectile-mode)
;; ^^ won't work, disable projectile-global-mode for it to work
)
#+END_SRC

* recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
:ensure t)
#+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
:ensure t
:config
(global-set-key (kbd "C-<f8>") 'neotree-toggle)
)
#+END_SRC

* ido mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
:ensure t
:config
(ido-mode 1)
(ido-vertical-mode 1)
)
#+END_SRC

* helm
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:config
;; must set before helm-config,  otherwise helm use defaut
;; prefix "C-x c", which is inconvenient because you can
;; accidentially pressed "C-x C-c"
(setq helm-command-prefix-key "C-c h")

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(setq
 helm-google-suggest-use-curl-p t
 helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
 helm-quick-update t ; do not display invisible candidates
 helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
 helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
 helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

 helm-split-window-default-side 'other ;; open helm buffer in another window
 helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
 ;; helm-buffers-favorite-modes (append helm-buffers-favorite-modes
 ;;                                     '(picture-mode artist-mode))
 helm-candidate-number-limit 200 ; limit the number of displayed canidates
 helm-M-x-requires-pattern 0     ; show all candidates when set to 0
 helm-boring-file-regexp-list
 '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") ; do not show these files in helm buffer
 helm-ff-file-name-history-use-recentf t
 helm-move-to-line-cycle-in-source t ; move to end or beginning of source
                                        ; when reaching top or bottom of source.
 ido-use-virtual-buffers t      ; Needed in helm-buffers-list
 helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non--nil
                                        ; useful in helm-mini that lists buffers
 )

;; Save current position to mark ring when jumping to a different place
(add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

(helm-mode 1)
)
#+END_SRC

** helm-config
#+BEGIN_SRC emacs-lisp
(use-package helm-config
:ensure f
:config)
#+END_SRC

** helm-eshell
#+BEGIN_SRC emacs-lisp
(use-package helm-eshell
:ensure f
:config)
#+END_SRC

** helm-files
#+BEGIN_SRC emacs-lisp
(use-package helm-files
:ensure f
:config)
#+END_SRC

** helm-grep
#+BEGIN_SRC emacs-lisp
(use-package helm-grep
:ensure f
:config
(define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
(define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
(define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
)
#+END_SRC

* calfw
** calfw-cal
#+BEGIN_SRC emacs-lisp
(use-package calfw-cal
:ensure t
:config
(setq calendar-week-start-day 1)
)
#+END_SRC
** calfw-ical
#+BEGIN_SRC emacs-lisp
(use-package calfw-ical
:ensure t
:config
(setq calendar-week-start-day 1)
)
#+END_SRC
** calfw-org
#+BEGIN_SRC emacs-lisp
(use-package calfw-org
:ensure t
:config
(setq calendar-week-start-day 1)
)
#+END_SRC

* isearch
#+BEGIN_SRC emacs-lisp
;; Bind C-Tab to make a highlightion from an isearch
(defun isearch-highlight-phrase ()
  "Invoke `highligh-phrase' from within isearch."
  (interactive)
  (let ((case-fold-search isearch-case-fold-search))
    (highlight-phrase (if isearch-regexp
                          isearch-string
                        (regexp-quote isearch-string)))))

(define-key isearch-mode-map (kbd "C-<tab>") 'isearch-highlight-phrase)
#+END_SRC

* rcirc
#+BEGIN_SRC emacs-lisp
;; rcirc config
(use-package tls
:ensure t
:config
(setq rcirc-server-alist
      '(("irc.freenode.net"
         :port 6667
         :channels ("#emacs" "#haskell" ;; "#clojure #emacs"
                    ))))
(put 'narrow-to-region 'disabled nil)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;(use-package rcirc
;;:ensure t
;;:config
;; configuration within private_config.org
;; (setq rcirc-default-nick "<user>")
;; (setq rcirc-default-full-name "<fullname>")
;; (setq rcirc-authinfo
;;       ;; /msg NickServ identify <password>
;;       '(("freenode" nickserv "<username>" "<password>")
;;         ;; ("freenode" chanserv "your nick" "#hiddenchan" "ninjaisthepassword")
;;         ))
 
;; With SSL
;; (setq rcirc-server-alist
;;       '(("irc.freenode.net"
;;          :port 7000
;;          :connect-function open-tls-stream
;;          :channels ("#emacs" "#haskell"))))
 ;; Don't forget to add (require 'tls) first

;; Without SSL
;;)
#+END_SRC
* rvm el
#+BEGIN_SRC emacs-lisp
;; rvm el
(use-package rvm
:ensure t
:config
(rvm-use-default) ;; use rvm's default ruby for the current Emacs session
)
#+END_SRC

* w3m
#+BEGIN_SRC emacs-lisp
  ;; w3m basic configuration
  ;; (setq browse-url-browser-function 'w3m-browse-url)
   (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
   ;; optional keyboard short-cut
   (global-set-key "\C-xm" 'browse-url-at-point)

  ;; anyhow, set the brower to the -firefox- chromium
  ;; (setq browse-url-browser-function 'browse-url-firefox)
  (setq browse-url-browser-function 'browse-url-chromium)
#+END_SRC

* pushbullet
#+BEGIN_SRC emacs-lisp
;; configuration within: private_config.org
;; Pushbullet Api Key for frosch03
;; (setq pushbullet-api-key "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
#+END_SRC

* mu4e
#+BEGIN_SRC emacs-lisp
(use-package mu4e
:ensure f
:config
(setq
    mu4e-maildir       "~/Mail"   ;; top-level Maildir
    mu4e-sent-folder   "/frosch03/Sent"       ;; folder for sent messages
    mu4e-drafts-folder "/drafts"     ;; unfinished messages
    mu4e-trash-folder  "/frosch03/Trash"      ;; trashed messages
    mu4e-refile-folder "/archive")   ;; saved messages

(setq
   ;; mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
   mu4e-get-mail-command "~/bin/offlineimap-notify.py" ;
   mu4e-get-mail-command "mbsync -a"
   mu4e-update-interval 300)             ;; update every 5 minutes

;; tell message-mode how to send mail
(setq user-mail-address "frosch03@frosch03.de")
(setq user-full-name "Matthias Brettschneider")
(setq mu4e-compose-signature-auto-include nil) ;; insert signature with C-c C-w
(setq mu4e-compose-signature "open source, open minds, open future")

;; configuration within: private_config.org
;; (setq message-send-mail-function 'smtpmail-send-it
;;       smtpmail-starttls-credentials '(("<servername>" <port> nil nil))
;;       smtpmail-auth-credentials '(("<servername>" <port> "<username>" nil))
;;       smtpmail-default-smtp-server "<servername>"
;;       smtpmail-smtp-server "<servername>"
;;       smtpmail-smtp-service <port>
;;       smtpmail-local-domain "<domain>")

(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
(add-to-list 'mu4e-bookmarks
             '("((date:7d..now) AND not (maildir:/frosch03/Trash OR maildir:/gmail/[Gmail].Trash OR maildir:/gmail/[Gmail].Spam OR maildir:/frosch03/Spam OR maildir:\"/gmail/[Gmail].All Mail\") AND not flag:trashed)" "No Trash" ?b))
(add-to-list 'mu4e-bookmarks
             '("(((date:30d..now) AND not flag:trashed) AND (maildir:/frosch03/INBOX OR maildir:/gmail/INBOX)) AND not v:OSCC*" "Inbox" ?i))
(add-to-list 'mu4e-bookmarks
             '("(((date:30d..now) AND not flag:trashed) AND (maildir:/frosch03/INBOX OR maildir:/gmail/INBOX)) AND v:OSCC*" "Lists (OSCC*)" ?l))

;; (setq mu4e-html2text-command "html2text -utf8 -nobs -width 72")
(setq mu4e-html2text-command "w3m -T text/html")
)
#+END_SRC

In order to generate html mails from org-mode, this function helps to
add some org configurations before the output is created. Here:

- imagemagick is selected for cutting the latex formulas into little
  snippits. Also
- the table of content is disabled
  #+BEGIN_SRC lisp
  (defun frog/mu4e-org-compose ()
    "Switch to/from mu4e-compose-mode and org-mode"
     (interactive)
     ;;(if (not (boundp 'kdm/mu4e-org-html-opt-done))
     (let ((p (point)))
       (goto-char (point-min))
       (let ((case-fold-search t))
         (when (not (search-forward "#+OPTIONS: tex:imagemagick" nil t))
           (goto-char (point-max))
           (insert "\n#+OPTIONS: tex:imagemagick\n#+OPTIONS: toc:0\n")))
       (goto-char p))
     (if (eq 'mu4e-compose-mode (buffer-local-value 'major-mode (current-buffer)))
         (org~mu4e-mime-switch-headers-or-body)
       (mu4e-compose-mode)))
  (global-set-key "\M-@" 'frog/mu4e-org-compose)
  #+END_SRC

* autshine
#+BEGIN_SRC emacs-lisp
;; outshine tests
(use-package outshine
:ensure t
:config
(add-hook 'outline-minor-mode-hook 'outshine-hook-function)
(add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
(add-hook 'LaTeX-mode-hook 'outline-minor-mode)
(add-hook 'haskell-mode-hook 'outline-minor-mode)
)
#+END_SRC

* jekyll
#+BEGIN_SRC emacs-lisp
(use-package hyde
:ensure t
:config
(setq hyde/hyde-list-posts-command "/bin/ls -ltr *.md"
      hyde-home "/home/frosch03/Documents/Blog")
;; (setq hyde/hyde-list-posts-command "/bin/ls -ltr *.md"
;;       hyde/git/remote "master"   ; The name of the branch on which your blog resides
;;       hyde/deploy-command  "rsync -vr _site/* nkv@ssh.hcoop.net:/afs/hcoop.net/user/n/nk/nkv/public_html/nibrahim.net.in/" ; Command to deploy
;;       hyde-custom-params '(("category" "personal")
;; 			   ("tags" "")
;; 			   ("cover" "false")
;; 			   ("cover-image" ""))
;;       )
)
#+END_SRC

* gnugol
#+BEGIN_SRC emacs-lisp
;; gnugol
(add-to-list 'load-path "~/.emacs.d/gnugol/")
(autoload 'gnugol "gnugol")
(global-set-key (kbd "C-c C-g") 'gnugol)
#+END_SRC

* sunrise commander
#+BEGIN_SRC emacs-lisp
;; sunrise commander
(add-to-list 'load-path "~/.emacs.d/sunrise-commander/")
(autoload 'sunrise-commander "sunrise-commander")
;; (require 'sunrise-commander)
#+END_SRC

* yassnippets
#+BEGIN_SRC emacs-lisp
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        "~/.emacs.d/snippets"                 ;; the default collection
        ))
#+END_SRC

* weechat
#+BEGIN_SRC emacs-lisp
(use-package weechat
:ensure t)
#+END_SRC

* tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
:ensure t
:config
(setq tramp-default-method "ssh")
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
)
#+END_SRC

* nginxmode
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
:ensure t)
#+END_SRC

* elfeed
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'elfeed)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/Org/feeds.org"))
#+END_SRC

* eww
- This here is to toggle images in eww buffers on and off
  #+BEGIN_SRC emacs-lisp
  (defvar-local endless/display-images t)

  (defun endless/toggle-image-display ()
    "Toggle images display on current buffer."
    (interactive)
    (setq endless/display-images
          (null endless/display-images))
    (endless/backup-display-property endless/display-images))

  (defun endless/backup-display-property (invert &optional object)
    "Move the 'display property at POS to 'display-backup.
  Only applies if display property is an image.
  If INVERT is non-nil, move from 'display-backup to 'display
  instead.
  Optional OBJECT specifies the string or buffer. Nil means current
  buffer."
    (let* ((inhibit-read-only t)
           (from (if invert 'display-backup 'display))
           (to (if invert 'display 'display-backup))
           (pos (point-min))
           left prop)
      (while (and pos (/= pos (point-max)))
        (if (get-text-property pos from object)
            (setq left pos)
          (setq left (next-single-property-change pos from object)))
        (if (or (null left) (= left (point-max)))
            (setq pos nil)
          (setq prop (get-text-property left from object))
          (setq pos (or (next-single-property-change left from object)
                        (point-max)))
          (when (eq (car prop) 'image)
            (add-text-properties left pos (list from nil to prop) object))))))
  #+END_SRC

- Bind that endless/display-images function to a key
  #+BEGIN_SRC emacs-lisp
  (add-hook 'eww-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-t") 'endless/toggle-image-display)))
  #+END_SRC

* Ur/Web mode
Ur/Web mode is a mode for the programming environment of Ur/Web.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/urweb-mode/")
(load "urweb-mode-startup")
#+END_SRC

* Atomic Chrome
I use this with the [[https://github.com/GhostText/GhostText][ghost-text]] extension within firefox

#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
:ensure t
:config
(atomic-chrome-start-server)
(setq atomic-chrome-buffer-open-style 'frame)
)
#+END_SRC
